{
  "inm": {
    "prefix": "inm",
    "body": [
      "import matplotlib.pyplot as plt",
      "import numpy as np"
    ],
    "description": ""
  },
  "inmp": {
    "prefix": "inmp",
    "body": [
      "import matplotlib.pyplot as plt",
      "import numpy as np",
      "import pandas as pd"
    ],
    "description": ""
  },
  "inms": {
    "prefix": "inms",
    "body": [
      "import matplotlib.pyplot as plt",
      "import numpy as np",
      "import scipy.stats as stats"
    ],
    "description": ""
  },
  "inp": {
    "prefix": "inp",
    "body": [
      "import numpy as np"
    ],
    "description": ""
  },
  "irnd": {
    "prefix": "irnd",
    "body": [
      "import numpy.random as random",
      ""
    ],
    "description": ""
  },
  "rndsd": {
    "prefix": "rndsd",
    "body": [
      "np.random.seed(42)"
    ],
    "description": ""
  },
  "ipd": {
    "prefix": "ipd",
    "body": [
      "import pandas as pd"
    ],
    "description": ""
  },
  "iplt": {
    "prefix": "iplt",
    "body": [
      "import matplotlib.pyplot as plt"
    ],
    "description": ""
  },
  "impl": {
    "prefix": "impl",
    "body": [
      "import matplotlib as mpl"
    ],
    "description": ""
  },
  "ists": {
    "prefix": "ists",
    "body": [
      "import scipy.stats as stats"
    ],
    "description": ""
  },
  "isns": {
    "prefix": "isns",
    "body": [
      "import seaborn as sns"
    ],
    "description": ""
  },
  "isy": {
    "prefix": "isy",
    "body": [
      "import sympy as sy",
      ""
    ],
    "description": ""
  },
  "it": {
    "prefix": "it",
    "body": [
      "import torch"
    ],
    "description": ""
  },
  "itnn": {
    "prefix": "itnn",
    "body": [
      "import torch.nn as nn"
    ],
    "description": ""
  },
  "iaz": {
    "prefix": "iaz",
    "body": [
      "import arviz as az",
      ""
    ],
    "description": ""
  },
  "ipm": {
    "prefix": "ipm",
    "body": [
      "import pymc as pm",
      "import arviz as az",
      "",
      "az.style.use('arviz-darkgrid')"
    ],
    "description": ""
  },
  "mesh": {
    "prefix": "mesh",
    "body": [
      "def make_mesh(lims, h):",
      "",
      "    x = np.linspace(lims[0], lims[1], h)",
      "    y = np.linspace(lims[2], lims[3], h)",
      "    X, Y = np.meshgrid(x, y)",
      "",
      "    return X, Y",
      ""
    ],
    "description": ""
  },
  "meshd": {
    "prefix": "meshd",
    "body": [
      "def make_mesh_d(lims, h):",
      "",
      "    x = np.arange(lims[0], lims[1], h)",
      "    y = np.arange(lims[2], lims[3], h)",
      "    X, Y = np.meshgrid(x, y)",
      "",
      "    return X, Y",
      ""
    ],
    "description": ""
  },
  "rcsv": {
    "prefix": "rcsv",
    "body": [
      "data = pd.read_csv('')"
    ],
    "description": ""
  },
  "fshow": {
    "prefix": "fshow",
    "body": [
      "plt.show()"
    ],
    "description": ""
  },
  "f12": {
    "prefix": "f12",
    "body": [
      "_, axes = plt.subplots(1, 2, figsize=(10, 4), constrained_layout=True)"
    ],
    "description": ""
  },
  "f21": {
    "prefix": "f21",
    "body": [
      "_, axes = plt.subplots(2, 1, figsize=(10, 8), constrained_layout=True)"
    ],
    "description": ""
  },
  "f31": {
    "prefix": "f31",
    "body": [
      "_, axes = plt.subplots(3, 1, figsize=(10, 8), constrained_layout=True)"
    ],
    "description": ""
  },
  "f13": {
    "prefix": "f13",
    "body": [
      "_, axes = plt.subplots(1, 3, figsize=(10, 6), constrained_layout=True)"
    ],
    "description": ""
  },
  "f1": {
    "prefix": "f1",
    "body": [
      "_, ax = plt.subplots(figsize=(8, 4))"
    ],
    "description": ""
  },
  "f22": {
    "prefix": "f22",
    "body": [
      "_, axes = plt.subplots(2, 2, figsize=(10, 6), constrained_layout=True)"
    ],
    "description": ""
  },
  "fsv": {
    "prefix": "fsv",
    "body": [
      "plt.savefig('../images/')"
    ],
    "description": ""
  },
  "fsty": {
    "prefix": "fsty",
    "body": [
      "plt.style.use():"
    ],
    "description": ""
  },
  "frc": {
    "prefix": "frc",
    "body": [
      "@mpl.rc_context({",
      "    'font.family': 'sans-serif',",
      "    'axes.titleweight': 'bold',",
      "})",
      ""
    ],
    "description": ""
  },
  "fsubaj": {
    "prefix": "fsubaj",
    "body": [
      "plt.subplots_adjust(bottom=0.1,",
      "                    left=0.15,",
      "                    right=1,",
      "                    top=1,",
      "                    wspace=0.3,",
      "                    hspace=0.25)"
    ],
    "description": ""
  },
  "fcbar": {
    "prefix": "cbar",
    "body": [
      "def add_cbar(fig,",
      "             loc,",
      "             orient='v',",
      "             cmap='RdBu_r',",
      "             vmin=-1,",
      "             vmax=1,",
      "             labelsize=20):",
      "",
      "    norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)",
      "    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)",
      "",
      "    ruler = fig.add_axes(loc)",
      "    if orient == 'h':",
      "        cbar = f1.colorbar(sm, cax=ruler, orientation='horizontal')",
      "    if orient == 'v':",
      "        cbar = f1.colorbar(sm, cax=ruler, orientation='vertical')",
      "    cbar.ax.tick_params(labelsize=labelsize)",
      "",
      "    return cbar",
      ""
    ],
    "description": ""
  },
  "fcbar2": {
    "prefix": "cbar2",
    "body": [
      "def add_cbar(tick_values,",
      "             tickformat='value',",
      "             ticksize='medium',",
      "             label=None,",
      "             labelsize='medium'):",
      "    cbar = plt.colorbar(ticks=tick_values / tick_values.max())",
      "    cbar.ax.set_yticklabels([f\"{tickformat}\" for value in tick_values],",
      "                            fontsize=ticksize)",
      "    if label:",
      "        cbar.set_label(label, fontsize=labelsize)",
      ""
    ],
    "description": ""
  },
  "a3d": {
    "prefix": "a3d",
    "body": [
      "fig = plt.figure(figsize=(12, 6))",
      "ax = fig.add_subplot(111, projection='3d')",
      "",
      "lims = [-1.8, 1.8, -1.3, 1.3, -1.0, 1.0]",
      "",
      "ax.set(xlabel=\"$x_1$\",",
      "       ylabel=\"$x_2$\",",
      "       zlabel=\"$x_3$\",",
      "       xlim=lims[:2],",
      "       ylim=lims[2:4],",
      "       zlim=lims[4:6])",
      ""
    ],
    "description": ""
  },
  "alab": {
    "prefix": "alab",
    "body": [
      "ax.set(xlabel='x', ylabel='y')",
      ""
    ],
    "description": ""
  },
  "aspine": {
    "prefix": "spine",
    "body": [
      "ax.spines[['top', 'right']].set_visible(False)",
      ""
    ],
    "description": ""
  },
  "main": {
    "prefix": "main",
    "body": [
      "if __name__ == '__main__':"
    ],
    "description": ""
  },
  "aannote": {
    "prefix": "aannote",
    "body": [
      "for p in ax.patches:",
      "    width = p.get_width()",
      "    height = p.get_height()",
      "    x, y = p.get_xy()",
      "    ax.annotate(f'{height/100:.2%}', (x + width / 2, y + height * 1.02 + 5),",
      "                ha='center')",
      ""
    ],
    "description": ""
  },
}
